// Place your key bindings in this file to override the defaults
[
  // Whichkey
  {
    "key": "space",
    "command": "whichkey.show",
    "when": "neovim.mode != insert && (editorTextFocus || !inputFocus)"
  },

  // Paste Below
  {
    "command": "vscode-neovim.send",
    "key": "alt+v",
    "when": "editorTextFocus && neovim.mode != insert",
    "args": "m`o<ESC>p``"
  },
  // Paste Above
  {
    "command": "vscode-neovim.send",
    "key": "alt+p",
    "when": "editorTextFocus && neovim.mode != insert",
    "args": "m`O<ESC>p``"
  },

  // Move to start and end of line
  {
    "command": "vscode-neovim.send",
    "key": "alt+h",
    "when": "editorTextFocus && neovim.mode != insert",
    "args": "^"
  },
  {
    "command": "vscode-neovim.send",
    "key": "alt+l",
    "when": "editorTextFocus && neovim.mode != insert",
    "args": "g_"
  },
  {
    "command": "vscode-neovim.send",
    "key": "alt+h",
    "when": "editorTextFocus && neovim.mode == insert",
    "args": "<C-O>I"
  },
  {
    "command": "vscode-neovim.send",
    "key": "alt+l",
    "when": "editorTextFocus && neovim.mode == insert",
    "args": "<END>"
  },

  // Insert ;
  {
    "command": "vscode-neovim.send",
    "key": "alt+;",
    "when": "editorTextFocus && neovim.mode == insert",
    "args": "<Esc>miA;<Esc>`ii"
  },
  {
    "command": "vscode-neovim.send",
    "key": "alt+,",
    "when": "editorTextFocus && neovim.mode == insert",
    "args": "<Esc>miA,<Esc>`ii"
  },

  // Copy Whole buffer
  {
    "command": "vscode-neovim.send",
    "key": "ctrl+y",
    "when": "editorTextFocus && neovim.mode != insert",
    "args": "<cmd>%y+<CR>"
  },

  // Change word in insert mode
  {
    "command": "vscode-neovim.send",
    "key": "ctrl+w",
    "when": "editorTextFocus && neovim.mode == insert",
    "args": "<C-O>ciw"
  },

  // Insert empty line below (Normal Mode)
  {
    "command": "vscode-neovim.send",
    "key": "alt+o",
    "when": "editorTextFocus && neovim.mode != insert",
    "args": ":<C-u>call append(line(\".\"), repeat([\"\"], v:count1))<CR>"
  },

  // Insert empty line above (Normal Mode)
  {
    "command": "vscode-neovim.send",
    "key": "alt+shift+o",
    "when": "editorTextFocus && neovim.mode != insert",
    "args": ":<C-u>call append(line(\".\")-1, repeat([\"\"], v:count1))<CR>"
  },

  // Insert empty line below (Insert Mode)
  {
    "command": "vscode-neovim.send",
    "key": "alt+o",
    "when": "editorTextFocus && neovim.mode == insert",
    "args": "<C-O>o"
  },

  // Insert empty line above (Insert Mode)
  {
    "command": "vscode-neovim.send",
    "key": "alt+shift+o",
    "when": "editorTextFocus && neovim.mode == insert",
    "args": "<C-O>O"
  },

  // Insert blank line below (o<Esc>)
  {
    "command": "vscode-neovim.send",
    "key": "] space",
    "when": "editorTextFocus && neovim.mode != insert",
    "args": "o<ESC>"
  },

  // Insert blank line above (O<Esc>)
  {
    "command": "vscode-neovim.send",
    "key": "[ space",
    "when": "editorTextFocus && neovim.mode != insert",
    "args": "O<ESC>"
  },

  // Errors
  {
    "key": "] e",
    "command": "editor.action.marker.next",
    "when": "neovim.mode != insert && editorTextFocus && !editorReadonly"
  },
  {
    "key": "[ e",
    "command": "editor.action.marker.prev",
    "when": "neovim.mode != insert && editorTextFocus && !editorReadonly"
  },
  {
    "key": "] d",
    "command": "editor.action.marker.nextinfiles",
    "when": "neovim.mode != insert && editortextfocus && !editorreadonly"
  },
  {
    "key": "[ d",
    "command": "editor.action.marker.previnfiles",
    "when": "neovim.mode != insert && editortextfocus && !editorreadonly"
  },

  // Closes markers (error, warning, info)
  {
    "key": "escape",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },

  // Git Change
  {
    "key": "[ h",
    "name": "Previous change",
    "type": "command",
    "command": "workbench.action.editor.previousChange",
    "when": "neovim.mode != insert && editorTextFocus && !editorReadonly"
  },
  {
    "key": "] h",
    "name": "Next change",
    "type": "command",
    "command": "workbench.action.editor.nextChange",
    "when": "neovim.mode != insert && editorTextFocus && !editorReadonly"
  },

  // Clear `highlight` command
  // {
  //   "key": "escape",
  //   "name": "Clear Highlights",
  //   "type": "command",
  //   "command": "vscode-neovim.send",
  //   "args": ":noh<CR>",
  //   "when": "neovim.mode != insert && editorTextFocus && !editorReadonly"
  // },

  // GitHub Copilot
  {
    "key": "alt+l",
    "command": "editor.action.inlineSuggest.acceptNextWord",
    "when": "neovim.mode == 'insert' && inlineSuggestionVisible && !accessibilityModeEnabled && !editorReadonly"
  },
  {
    "key": "ctrl+enter",
    "command": "github.copilot.acceptCursorPanelSolution",
    "when": "neovim.mode == 'insert' && github.copilot.panelVisible && activeWebviewPanelId == 'GitHub Copilot Suggestions'"
  },

  // Toggle File Explorer
  {
    "key": "space e",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.files.action.focusFilesExplorer"
      ]
    },
    "when": "neovim.mode == 'Normal' && (editorTextFocus || !inputFocus) && !sideBarFocus"
  },
  {
    "key": "space e",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.action.focusActiveEditorGroup"
      ]
    },
    "when": "sideBarFocus && !inputFocus"
  },
  {
    "key": "space e",
    "when": "neovim.mode == 'Normal' && editorTextFocus && foldersViewVisible",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "shift+alt+f",
    "command": "filesExplorer.findInFolder",
    "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
  },

  // Suggestion
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "alt+j",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "alt+k",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },

  // Quick Open
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenNavigateNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenNavigatePrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "alt+j",
    "command": "workbench.action.quickOpenNavigateNext",
    "when": "inQuickOpen"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.quickOpenNavigatePrevious",
    "when": "inQuickOpen"
  },

  // Move a line or a selection up or down
  {
    "key": "alt+k",
    "command": "editor.action.moveLinesUpAction",
    "when": "!(suggestWidgetMultipleSuggestions && suggestWidgetVisible) && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "alt+j",
    "command": "editor.action.moveLinesDownAction",
    "when": "!(suggestWidgetMultipleSuggestions && suggestWidgetVisible) && (editorTextFocus || !inputFocus)"
  },

  // Sidebar
  {
    "key": "ctrl+h",
    "command": "workbench.action.focusSideBar",
    "when": "!sideBarFocus"
  },
  {
    "key": "ctrl+l",
    "when": "sideBarFocus",
    "command": "workbench.action.focusActiveEditorGroup"
  },

  // Tab Switching
  {
    "key": "shift+h",
    "command": "workbench.action.previousEditor",
    "when": "neovim.mode == normal && editorTextFocus"
  },
  {
    "key": "shift+l",
    "command": "workbench.action.nextEditor",
    "when": "neovim.mode == normal && editorTextFocus"
  },
  {
    "key": "[ b",
    "command": "workbench.action.previousEditor",
    "when": "neovim.mode == normal && editorTextFocus"
  },
  {
    "key": "] b",
    "command": "workbench.action.nextEditor",
    "when": "neovim.mode == normal && editorTextFocus"
  },
  // {
  //   "key": "[ B",
  //   "command": "workbench.action.moveEditorLeftInGroup"
  // },
  // {
  //   "key": "] B",
  //   "command": "workbench.action.moveEditorRightInGroup"
  // },

  // Navigate Panes
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "neovim.mode != insert && editorTextFocus"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "neovim.mode != insert && editorTextFocus"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    "when": "neovim.mode != insert && editorTextFocus"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    "when": "neovim.mode != insert && editorTextFocus"
  },
  {
    "key": "ctrl+right",
    "command": "workbench.action.increaseViewWidth",
    "when": "neovim.mode != insert && editorTextFocus"
  },
  {
    "key": "ctrl+left",
    "command": "workbench.action.decreaseViewWidth",
    "when": "neovim.mode != insert && editorTextFocus"
  },
  {
    "key": "ctrl+up",
    "command": "workbench.action.increaseViewHeight",
    "when": "neovim.mode != insert && editorTextFocus"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.decreaseViewHeight",
    "when": "neovim.mode != insert && editorTextFocus"
  },

  // Move an Editor
  {
    "key": "ctrl+shift+k",
    "command": "workbench.action.moveEditorToAboveGroup",
    "when": "editorFocus && !inQuickOpen && !listFocus && focusedView != 'workbench.view.search'"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.moveEditorToBelowGroup",
    "when": "editorFocus && !inQuickOpen && !listFocus && focusedView != 'workbench.view.search'"
  },
  {
    "key": "ctrl+shift+h",
    "command": "workbench.action.moveEditorToLeftGroup",
    "when": "editorFocus && !inQuickOpen && !listFocus && focusedView != 'workbench.view.search'"
  },
  {
    "key": "ctrl+shift+l",
    "command": "workbench.action.moveEditorToRightGroup",
    "when": "editorFocus && !inQuickOpen && !listFocus && focusedView != 'workbench.view.search'"
  },

  // Terminal
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+t",
    "command": "workbench.action.terminal.focus",
    "when": "!terminalFocus"
  },

  // Toggle Terminal Maximization
  {
    "key": "ctrl+m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "terminalFocus"
  },

  // Search Result Navigation
  {
    "key": "ctrl+n",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult && activeViewlet == 'workbench.view.search'"
  },
  {
    "key": "ctrl+p",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult && activeViewlet == 'workbench.view.search'"
  },

  // Change VSCode default Keybindings
  {
    "key": "ctrl+a",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
    "key": "ctrl+a",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.mode == 'insert'"
  },
  {
    "key": "ctrl+a",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal.a && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+a",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysInsert.a && neovim.init && neovim.mode == 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+c",
    "command": "-vscode-neovim.escape",
    "when": "editorTextFocus && neovim.ctrlKeysNormal.c && neovim.init && !dirtyDiffVisible && !findWidgetVisible && !inReferenceSearchEditor && !markersNavigationVisible && !notebookCellFocused && !notificationCenterVisible && !parameterHintsVisible && !referenceSearchVisible && neovim.mode == 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+c",
    "command": "-vscode-neovim.escape",
    "when": "editorTextFocus && neovim.ctrlKeysInsert.c && neovim.init && neovim.mode != 'normal' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+/",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active && neovim.mode != insert"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+`",
    "command": "terminalSuggestToggleExplainMode",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "ctrl+/",
    "command": "-terminalSuggestToggleExplainMode",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "alt+d",
    "command": "editor.action.duplicateSelection"
  }
]
